/**
 * ARTIK Cloud API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ArtikCloud);
  }
}(this, function(expect, ArtikCloud) {
  'use strict';

  var api;

  beforeEach(function() {
    var newClient = new ArtikCloud.ApiClient();

    // Configure OAuth2 access token for authorization: artikcloud_oauth
    var artikcloud_oauth = newClient.authentications['artikcloud_oauth'];
    artikcloud_oauth.accessToken = "f9f75bd0b0fc46a9a604703909f4331d"

    api = new ArtikCloud.MessagesApi(newClient);
    api.getApiClient
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessagesApi', function() {
    describe('getAggregatesHistogram', function() {
      it('should call getAggregatesHistogram successfully', function(done) {
        //uncomment below and update the code to test getAggregatesHistogram
        //instance.getAggregatesHistogram(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFieldPresence', function() {
      it('should call getFieldPresence successfully', function(done) {
        //uncomment below and update the code to test getFieldPresence
        //instance.getFieldPresence(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLastNormalizedMessages', function() {
      it('should call getLastNormalizedMessages successfully', function(done) {
        api.getLastNormalizedMessages({"sdids": "16f54be9b9ce4c69be14a6c8ff33ea8d"}, function(error, response) {
          if (error) throw error;

          expect(response.size).to.be(1);

          var normalized = response.data[0];

          var distance = normalized.data['distance'];
          expect(distance).to.be(850.745);

          var steps = normalized.data['steps'];
          expect(steps).to.be(935);

          done();
        });
      });
    });
    describe('getMessageAggregates', function() {
      it('should call getMessageAggregates successfully', function(done) {
        //uncomment below and update the code to test getMessageAggregates
        //instance.getMessageAggregates(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessageSnapshots', function() {
      it('should call getMessageSnapshots successfully', function(done) {
        //uncomment below and update the code to test getMessageSnapshots
        //instance.getMessageSnapshots(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNormalizedMessages', function() {
      it('should call getNormalizedMessages successfully', function(done) {
        //uncomment below and update the code to test getNormalizedMessages
        //instance.getNormalizedMessages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessageAction', function() {
      it('should call sendMessageAction successfully', function(done) {
        var message = new ArtikCloud.MessageAction();
        message.sdid = '16f54be9b9ce4c69be14a6c8ff33ea8d';
        message.type = 'message';
        message.ts = Date.now();
        message.data = {"distance":850.745,"steps":935};

        api.sendMessageAction(message, function(error, response) {
          if (error) throw error;

          var messageId = response.data.mid;
          var opts = {'mid': messageId};

          api.getNormalizedMessages(opts, function(error2, response2) {
            if (error2) throw error2;

            expect(response2.size).to.be(1);

            var normalized = response2.data[0];
            expect(normalized.mid).to.be(messageId);

            var distance = normalized.data['distance'];
            expect(distance).to.be(850.745);

            var steps = normalized.data['steps'];
            expect(steps).to.be(935);

            done();
          });
        });
      });
    });
  });

}));
